{"version":3,"sources":["webpack:///./src/components/src/components/win.vue","webpack:///./src/components/src/components/john_win.vue","webpack:///./src/pages/src/pages/Fishing.vue"],"names":[],"mappings":";AAuBA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;UAAA;EACA;UAAA;EACA;EACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AACA;AACA;AACA;;;;AC7BA;EACA;EACA;EACA;AACA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;UAAA;EACA;UAAA;EACA;EACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AACA;AACA;AACA;;;;ACuFA;EACA;AACA;AAEA;EACA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;AACA;AAEA;EACA;AACA","file":"css/2.6e46a8c6.css","sourcesContent":["<template>\n  <div>\n    <div class = \"page\">\n      <div class=\"ui image card\">\n        <img src=\"../assets/th.jpg\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'win',\n  data () {\n    return {\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n  img {\n    z-index: 99999;\n    width: 300px;\n    border-radius: 30px;\n  }\n\n  .page {\n    z-index: 99999;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation-name: bigger;\n    animation-duration: 3s;\n    opacity: 0.96;\n    text-align: center;\n  }\n\n  .page img {\n  }\n\n  /* The animation code */\n  @keyframes bigger {\n      0%   {transform: scale(0.7)}\n      50%  {transform: scale(1.5)}\n      100% {transform: scale(0.7)}\n  }\n\n</style>\n","<template>\n  <div>\n    <div class = \"page\">\n      <div class=\"ui image card\">\n        <img src=\"../assets/john_1.jpg\" />\n        <h4 class=\"text-white shadow\">{{ $t('john wins!') }}</h4>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'win',\n  data () {\n    return {\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n  img {\n    z-index: 99999;\n    width: 300px;\n    border-radius: 30px;\n  }\n\n  .page {\n    z-index: 99999;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation-name: bigger;\n    animation-duration: 3s;\n    opacity: 0.96;\n    text-align: center;\n  }\n\n  .page img {\n  }\n\n  /* The animation code */\n  @keyframes bigger {\n      0%   {transform: scale(0.2)}\n      50%  {transform: scale(0.8)}\n      100% {transform: scale(0.2)}\n  }\n\n</style>\n","<template>\n  <q-page padding>\n    <q-toolbar>\n      <q-toolbar-title>\n        {{ $t('fishing_note') }}\n      </q-toolbar-title>\n    </q-toolbar>\n    <q-toolbar v-if=\"human_vs_bot\">\n      <q-avatar>\n        <img src=\"../assets/john.png\">\n      </q-avatar>\n      <q-linear-progress stripe rounded style=\"height: 25px\" :value=\"progress\" class=\"q-mt-md\" :color=\"progress > 0.62 ? 'red' : 'blue'\"/>\n    </q-toolbar>\n    <div class=\"q-pa-md\">\n      <div class=\"row\">\n        <div class=\"col\" v-for = \"(f, index) in fishs1\" :key=\"index\" v-bind:class=\"[!memory || face0 == index ? 'face' : 'back', f.name ? 'good' : 'null', face0 == index ? 'focus' : 'other']\">\n          <q-card @click = \"flip(index,0) \">\n            <div class=\"content\">\n              <span class=\"header\">{{!memory || face0 == index ? f.name : '?'}}</span>\n            </div>\n          </q-card>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\" v-for = \"(f, index) in fishs2\" :key=\"index\" v-bind:class=\"[!memory || face1 == index ? 'face' : 'back', f.name ? 'good' : 'null', face1 == index ? 'focus' : 'other']\">\n          <q-card @click = \"flip(index,1)\">\n            <div class=\"content\">\n              <span class=\"header\">{{!memory || face1 == index ? f.name : '?'}}</span>\n            </div>\n          </q-card>\n        </div>\n      </div>\n    </div>\n    <span>{{$t('memory_mode')}}:</span>\n    <q-toggle\n      v-model=\"memory\"\n      color=\"green\"\n    />\n    <win v-show=\"winning\"></win>\n    <john-win v-show=\"loosing\" ></john-win>\n  </q-page>\n</template>\n\n<script>\nimport win from '../components/win'\nimport johnWin from '../components/john_win'\n\nexport default {\n  name: 'Fishing',\n  props: ['card_list', 'human_vs_bot', 'bot_level'],\n  components: {\n    win, johnWin\n  },\n  data () {\n    return {\n      w: false,\n      progress: 0.1,\n      winning: false,\n      loosing: false,\n      memory: true,\n      fishs1: [],\n      fishs2: [],\n      face0: -1,\n      face1: -1\n    }\n  },\n  methods: {\n    flip: function (i, n) {\n      if (n === 0 && !this.w) { this.face0 = i }\n      if (n === 1 && !this.w) { this.face1 = i }\n      if (!this.w && this.fishs1[this.face0] && this.fishs2[this.face1] && this.fishs1[this.face0].name === this.fishs2[this.face1].name) {\n        this.w = true\n        setTimeout(this.remove, 1000)\n      } else {\n        if (!this.w && this.face0 > -1 && this.face1 > -1) {\n          this.w = true\n          setTimeout(this.flipback, 1000)\n        }\n      }\n    },\n    isWin: function () {\n      var ww = true\n      for (var i = 0; i < this.fishs1.length; i++) {\n        if (this.fishs1[i].img !== '') { ww = false }\n      }\n      return ww\n    },\n    remove: function () {\n      this.fishs1[this.face0] = { img: '', name: '' }\n      this.fishs2[this.face1] = { img: '', name: '' }\n      // this.fishs1.splice(this.face0, 1)\n      // this.fishs2.splice(this.face1, 1)\n      this.flipback()\n      if (this.isWin()) {\n        this.win()\n        setTimeout(this.reset, 3000)\n      }\n    },\n    flipback: function () {\n      this.face0 = -1\n      this.face1 = -1\n      this.w = false\n    },\n    reset: function () {\n      this.fishs1 = this.card_list.filter(function (o) { return !o.hide }).slice().sort(function () {\n        return Math.random() - 0.5\n      }).slice(0, 4)\n      this.fishs2 = this.fishs1.filter(function (o) { return !o.hide }).slice().sort(function () {\n        return Math.random() - 0.5\n      })\n      this.winning = false\n      this.loosing = false\n      this.progress = 0\n      this.$emit('johnSay', 'Be relexed...')\n    },\n    win: function () {\n      this.winning = true\n      this.$emit('johnSay', 'You win!')\n    },\n    loose: function () {\n      this.loosing = true\n      this.$emit('johnSay', 'I win!')\n      setTimeout(this.reset, 2000)\n    },\n    go: function () {\n      if (!this.winning && !this.loosing) {\n        this.progress += (this.bot_level / 200)\n        if (this.progress >= 1 && this.human_vs_bot) {\n          this.loose()\n        }\n      }\n    }\n  },\n  mounted () {\n    setInterval(this.go, 500)\n    setTimeout(this.reset, 500)\n  }\n}\n</script>\n\n<style>\n.content {\n  text-align: center;\n}\n\n.q-card {\n  height: 25vh;\n  overflow: hidden;\n}\n\n.back img {\n  visibility: hidden;\n}\n\n.null {\n  visibility: hidden !important;\n}\n\n.header {\n  font-size: 18vw;\n}\n</style>\n"],"sourceRoot":""}